version: "3.8"

services:
  ######### proxy service #############
  proxy:
    build: ./proxy
    env_file:
      - .env
    ports:
      - "${PROXY_PORT}:80"
    depends_on:
      - api-gateway-1
      - api-gateway-2
      - api-gateway-3
    networks:
      network:
        ipv4_address: ${PROXY_IP}
    restart: unless-stopped
  ######### api-gateway service #########
  api-gateway-1:
    container_name: gateway
    build: ./gateway
    env_file:
      - .env
    ports:
      - "${GATEWAY_PORT_1}:5000"
    depends_on:
      - auth
      - projects
      - scraping
      - mongodb
      - redis
    networks:
      network:
        ipv4_address: ${GATEWAY_IP_1}
    restart: unless-stopped
    volumes:
      - ./gateway:/app

  api-gateway-2:
    container_name: gateway
    build: ./gateway
    env_file:
      - .env
    ports:
      - "${GATEWAY_PORT_2}:5000"
    depends_on:
      - auth
      - projects
      - scraping
      - mongodb
    networks:
      network:
        ipv4_address: ${GATEWAY_IP_2}
    restart: unless-stopped
    volumes:
      - ./gateway:/app

  api-gateway-3:
    container_name: gateway
    build: ./gateway
    env_file:
      - .env
    ports:
      - "${GATEWAY_PORT_3}:5000"
    depends_on:
      - auth
      - projects
      - scraping
      - mongodb
    networks:
      network:
        ipv4_address: ${GATEWAY_IP_3}
    restart: unless-stopped
    volumes:
      - ./gateway:/app
  ######### mongodb service #########
  mongodb:
    image: mongo:latest
    env_file:
      - .env
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    ports:
      - "${M_DB_PORT}:${MONGO_PORT}"
    volumes:
      - mongo_data:/data/db
    networks:
      network:
        ipv4_address: ${MONGO_IP}
  ######### redis service #########
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    env_file:
      - .env
    networks:
      network:
        ipv4_address: ${REDIS_IP}
    restart: unless-stopped

  ######### scraping service #########
  scraping:
    build: ./scraping
    env_file:
      - .env
    ports:
      - "${SCRAPING_PORT}:5002"
    volumes:
      - ./scraping:/app
    restart: unless-stopped
    networks:
      network:
        ipv4_address: ${SCRAPING_IP}

  ######### projects service #########
  projects:
    build: ./projects
    env_file:
      - .env
    ports:
      - "${PROJECT_PORT}:5001"
    volumes:
      - ./projects:/app
    depends_on:
      - projects_db
    restart: unless-stopped
    networks:
      network:
        ipv4_address: ${PROJECT_IP}

  projects_db:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PROJECTS_DB_USER}
      POSTGRES_PASSWORD: ${PROJECTS_DB_PASSWORD}
      POSTGRES_DB: ${PROJECTS_DB_NAME}
    ports:
      - "${PROJECTS_DB_PORT}:${P_DB_PORT}"
    volumes:
      - projects_data:/var/lib/postgresql/data
    networks:
      network:
        ipv4_address: ${PROJECT_DB_IP}

  ######### auth service #########
  auth:
    build: ./auth
    env_file:
      - .env
    ports:
      - "${AUTH_PORT}:5003"
    volumes:
      - ./auth:/app
    depends_on:
      - auth_db
    restart: unless-stopped
    networks:
      network:
        ipv4_address: ${AUTH_IP}

  auth_db:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    ports:
      - "${AUTH_DB_PORT}:${A_DB_PORT}"
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      network:
        ipv4_address: ${AUTH_DB_IP}

networks:
  network:
    name: ${APP_NAME}_network
    driver: "bridge"
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  projects_data:
    name: ${APP_NAME}_projects_data
  auth_data:
    name: ${APP_NAME}_auth_data
  mongo_data:
    name: ${APP_NAME}_mongo_data
